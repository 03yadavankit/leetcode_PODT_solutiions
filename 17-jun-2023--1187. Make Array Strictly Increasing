class Solution {
private:
    std::unordered_map<std::string, int> dp;

public:
    int makeArrayIncreasing(std::vector<int>& arr1, std::vector<int>& arr2) {
        std::vector<int> sorted(arr2);
        std::sort(sorted.begin(), sorted.end());
        int result = dfs(0, INT_MIN, arr1, sorted);
        return result < 2001 ? result : -1;
    }

private:
    int dfs(int i, int prev, const std::vector<int>& arr1, const std::vector<int>& arr2) {
        // If we have reached the end of arr1, no more operations are needed
        if (i == arr1.size()) { return 0; }

        // Construct a key from i and prev
        std::string key = std::to_string(i) + "," + std::to_string(prev);

        // If the result for this key is already computed, return it
        if (dp.count(key)) { return dp[key]; }

        // Initialize the cost to a cap
        int cost = 2001;

        // If the current number in arr1 is greater than prev, we can leave it
        if (arr1[i] > prev) { cost = dfs(i + 1, arr1[i], arr1, arr2); }

        // Find the first number in arr2 that is greater than prev
        auto it = std::upper_bound(arr2.begin(), arr2.end(), prev);

        // If such a number is found, replace the current number in arr1 with it
        if (it != arr2.end()) { cost = std::min(cost, 1 + dfs(i + 1, *it, arr1, arr2)); }

        // Save the result in the map and return it
        dp[key] = cost;
        return cost;
    }
};
