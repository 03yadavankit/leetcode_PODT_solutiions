class Solution {
public:
    vector<int> p;
    int dirs[4][2] = { {0, -1}, {0, 1}, {1, 0}, {-1, 0} };
    int row, col;

    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        int n = row * col;
        this->row = row;
        this->col = col;
        p.resize(n + 2);
        for (int i = 0; i < p.size(); ++i) p[i] = i;
        vector<vector<bool>> grid(row, vector<bool>(col, false));
        int top = n, bottom = n + 1;
        for (int k = cells.size() - 1; k >= 0; --k) {
            int i = cells[k][0] - 1, j = cells[k][1] - 1;
            grid[i][j] = true;
            for (int d = 0; d < sizeof(dirs)/sizeof(dirs[0]); ++d) {
                int ni = i + dirs[d][0], nj = j + dirs[d][1];
                if (ni >= 0 && ni < row && nj >= 0 && nj < col && grid[ni][nj]) {
                    p[find(getIndex(i, j))] = find(getIndex(ni, nj));
                }
            }
            if (i == 0) p[find(getIndex(i, j))] = find(top);
            if (i == row - 1) p[find(getIndex(i, j))] = find(bottom);
            if (find(top) == find(bottom)) return k;
        }
        return -1;
    }
    
    int getIndex(int i, int j) {
        return i * col + j;
    }
    
    int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }
};
